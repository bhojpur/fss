// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FssServiceClient is the client API for FssService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FssServiceClient interface {
	// StartLocalExtinguisher starts a Extinguisher on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the fss/config.yaml
	//   3. all bytes constituting the Extinguisher YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalExtinguisher(ctx context.Context, opts ...grpc.CallOption) (FssService_StartLocalExtinguisherClient, error)
	// StartFromPreviousExtinguisher starts a new Extinguisher based on a previous one.
	// If the previous Extinguisher does not have the can-replay condition set this call will result in an error.
	StartFromPreviousExtinguisher(ctx context.Context, in *StartFromPreviousExtinguisherRequest, opts ...grpc.CallOption) (*StartExtinguisherResponse, error)
	// StartExtinguisherRequest starts a new Extinguisher based on its specification.
	StartExtinguisher(ctx context.Context, in *StartExtinguisherRequest, opts ...grpc.CallOption) (*StartExtinguisherResponse, error)
	// Searches for Extinguisher(s) known to this instance
	ListExtinguishers(ctx context.Context, in *ListExtinguishersRequest, opts ...grpc.CallOption) (*ListExtinguishersResponse, error)
	// Subscribe listens to new Extinguisher(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (FssService_SubscribeClient, error)
	// GetExtinguisher retrieves details of a single Extinguisher
	GetExtinguisher(ctx context.Context, in *GetExtinguisherRequest, opts ...grpc.CallOption) (*GetExtinguisherResponse, error)
	// Listen listens to Extinguisher updates and log output of a running Extinguisher
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (FssService_ListenClient, error)
	// StopExtinguisher stops a currently running Extinguisher
	StopExtinguisher(ctx context.Context, in *StopExtinguisherRequest, opts ...grpc.CallOption) (*StopExtinguisherResponse, error)
}

type fssServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFssServiceClient(cc grpc.ClientConnInterface) FssServiceClient {
	return &fssServiceClient{cc}
}

func (c *fssServiceClient) StartLocalExtinguisher(ctx context.Context, opts ...grpc.CallOption) (FssService_StartLocalExtinguisherClient, error) {
	stream, err := c.cc.NewStream(ctx, &FssService_ServiceDesc.Streams[0], "/v1.FssService/StartLocalExtinguisher", opts...)
	if err != nil {
		return nil, err
	}
	x := &fssServiceStartLocalExtinguisherClient{stream}
	return x, nil
}

type FssService_StartLocalExtinguisherClient interface {
	Send(*StartLocalExtinguisherRequest) error
	CloseAndRecv() (*StartExtinguisherResponse, error)
	grpc.ClientStream
}

type fssServiceStartLocalExtinguisherClient struct {
	grpc.ClientStream
}

func (x *fssServiceStartLocalExtinguisherClient) Send(m *StartLocalExtinguisherRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fssServiceStartLocalExtinguisherClient) CloseAndRecv() (*StartExtinguisherResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartExtinguisherResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fssServiceClient) StartFromPreviousExtinguisher(ctx context.Context, in *StartFromPreviousExtinguisherRequest, opts ...grpc.CallOption) (*StartExtinguisherResponse, error) {
	out := new(StartExtinguisherResponse)
	err := c.cc.Invoke(ctx, "/v1.FssService/StartFromPreviousExtinguisher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fssServiceClient) StartExtinguisher(ctx context.Context, in *StartExtinguisherRequest, opts ...grpc.CallOption) (*StartExtinguisherResponse, error) {
	out := new(StartExtinguisherResponse)
	err := c.cc.Invoke(ctx, "/v1.FssService/StartExtinguisher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fssServiceClient) ListExtinguishers(ctx context.Context, in *ListExtinguishersRequest, opts ...grpc.CallOption) (*ListExtinguishersResponse, error) {
	out := new(ListExtinguishersResponse)
	err := c.cc.Invoke(ctx, "/v1.FssService/ListExtinguishers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fssServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (FssService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &FssService_ServiceDesc.Streams[1], "/v1.FssService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &fssServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FssService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type fssServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *fssServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fssServiceClient) GetExtinguisher(ctx context.Context, in *GetExtinguisherRequest, opts ...grpc.CallOption) (*GetExtinguisherResponse, error) {
	out := new(GetExtinguisherResponse)
	err := c.cc.Invoke(ctx, "/v1.FssService/GetExtinguisher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fssServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (FssService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &FssService_ServiceDesc.Streams[2], "/v1.FssService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &fssServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FssService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type fssServiceListenClient struct {
	grpc.ClientStream
}

func (x *fssServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fssServiceClient) StopExtinguisher(ctx context.Context, in *StopExtinguisherRequest, opts ...grpc.CallOption) (*StopExtinguisherResponse, error) {
	out := new(StopExtinguisherResponse)
	err := c.cc.Invoke(ctx, "/v1.FssService/StopExtinguisher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FssServiceServer is the server API for FssService service.
// All implementations must embed UnimplementedFssServiceServer
// for forward compatibility
type FssServiceServer interface {
	// StartLocalExtinguisher starts a Extinguisher on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the fss/config.yaml
	//   3. all bytes constituting the Extinguisher YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalExtinguisher(FssService_StartLocalExtinguisherServer) error
	// StartFromPreviousExtinguisher starts a new Extinguisher based on a previous one.
	// If the previous Extinguisher does not have the can-replay condition set this call will result in an error.
	StartFromPreviousExtinguisher(context.Context, *StartFromPreviousExtinguisherRequest) (*StartExtinguisherResponse, error)
	// StartExtinguisherRequest starts a new Extinguisher based on its specification.
	StartExtinguisher(context.Context, *StartExtinguisherRequest) (*StartExtinguisherResponse, error)
	// Searches for Extinguisher(s) known to this instance
	ListExtinguishers(context.Context, *ListExtinguishersRequest) (*ListExtinguishersResponse, error)
	// Subscribe listens to new Extinguisher(s) updates
	Subscribe(*SubscribeRequest, FssService_SubscribeServer) error
	// GetExtinguisher retrieves details of a single Extinguisher
	GetExtinguisher(context.Context, *GetExtinguisherRequest) (*GetExtinguisherResponse, error)
	// Listen listens to Extinguisher updates and log output of a running Extinguisher
	Listen(*ListenRequest, FssService_ListenServer) error
	// StopExtinguisher stops a currently running Extinguisher
	StopExtinguisher(context.Context, *StopExtinguisherRequest) (*StopExtinguisherResponse, error)
	mustEmbedUnimplementedFssServiceServer()
}

// UnimplementedFssServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFssServiceServer struct {
}

func (UnimplementedFssServiceServer) StartLocalExtinguisher(FssService_StartLocalExtinguisherServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalExtinguisher not implemented")
}
func (UnimplementedFssServiceServer) StartFromPreviousExtinguisher(context.Context, *StartFromPreviousExtinguisherRequest) (*StartExtinguisherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousExtinguisher not implemented")
}
func (UnimplementedFssServiceServer) StartExtinguisher(context.Context, *StartExtinguisherRequest) (*StartExtinguisherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExtinguisher not implemented")
}
func (UnimplementedFssServiceServer) ListExtinguishers(context.Context, *ListExtinguishersRequest) (*ListExtinguishersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExtinguishers not implemented")
}
func (UnimplementedFssServiceServer) Subscribe(*SubscribeRequest, FssService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedFssServiceServer) GetExtinguisher(context.Context, *GetExtinguisherRequest) (*GetExtinguisherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtinguisher not implemented")
}
func (UnimplementedFssServiceServer) Listen(*ListenRequest, FssService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedFssServiceServer) StopExtinguisher(context.Context, *StopExtinguisherRequest) (*StopExtinguisherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopExtinguisher not implemented")
}
func (UnimplementedFssServiceServer) mustEmbedUnimplementedFssServiceServer() {}

// UnsafeFssServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FssServiceServer will
// result in compilation errors.
type UnsafeFssServiceServer interface {
	mustEmbedUnimplementedFssServiceServer()
}

func RegisterFssServiceServer(s grpc.ServiceRegistrar, srv FssServiceServer) {
	s.RegisterService(&FssService_ServiceDesc, srv)
}

func _FssService_StartLocalExtinguisher_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FssServiceServer).StartLocalExtinguisher(&fssServiceStartLocalExtinguisherServer{stream})
}

type FssService_StartLocalExtinguisherServer interface {
	SendAndClose(*StartExtinguisherResponse) error
	Recv() (*StartLocalExtinguisherRequest, error)
	grpc.ServerStream
}

type fssServiceStartLocalExtinguisherServer struct {
	grpc.ServerStream
}

func (x *fssServiceStartLocalExtinguisherServer) SendAndClose(m *StartExtinguisherResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fssServiceStartLocalExtinguisherServer) Recv() (*StartLocalExtinguisherRequest, error) {
	m := new(StartLocalExtinguisherRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FssService_StartFromPreviousExtinguisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousExtinguisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FssServiceServer).StartFromPreviousExtinguisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FssService/StartFromPreviousExtinguisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FssServiceServer).StartFromPreviousExtinguisher(ctx, req.(*StartFromPreviousExtinguisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FssService_StartExtinguisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartExtinguisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FssServiceServer).StartExtinguisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FssService/StartExtinguisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FssServiceServer).StartExtinguisher(ctx, req.(*StartExtinguisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FssService_ListExtinguishers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExtinguishersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FssServiceServer).ListExtinguishers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FssService/ListExtinguishers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FssServiceServer).ListExtinguishers(ctx, req.(*ListExtinguishersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FssService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FssServiceServer).Subscribe(m, &fssServiceSubscribeServer{stream})
}

type FssService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type fssServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *fssServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FssService_GetExtinguisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtinguisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FssServiceServer).GetExtinguisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FssService/GetExtinguisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FssServiceServer).GetExtinguisher(ctx, req.(*GetExtinguisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FssService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FssServiceServer).Listen(m, &fssServiceListenServer{stream})
}

type FssService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type fssServiceListenServer struct {
	grpc.ServerStream
}

func (x *fssServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FssService_StopExtinguisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopExtinguisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FssServiceServer).StopExtinguisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FssService/StopExtinguisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FssServiceServer).StopExtinguisher(ctx, req.(*StopExtinguisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FssService_ServiceDesc is the grpc.ServiceDesc for FssService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FssService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.FssService",
	HandlerType: (*FssServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousExtinguisher",
			Handler:    _FssService_StartFromPreviousExtinguisher_Handler,
		},
		{
			MethodName: "StartExtinguisher",
			Handler:    _FssService_StartExtinguisher_Handler,
		},
		{
			MethodName: "ListExtinguishers",
			Handler:    _FssService_ListExtinguishers_Handler,
		},
		{
			MethodName: "GetExtinguisher",
			Handler:    _FssService_GetExtinguisher_Handler,
		},
		{
			MethodName: "StopExtinguisher",
			Handler:    _FssService_StopExtinguisher_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalExtinguisher",
			Handler:       _FssService_StartLocalExtinguisher_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _FssService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _FssService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fss.proto",
}
