// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FssUIClient is the client API for FssUI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FssUIClient interface {
	// ListExtinguisherSpecs returns a list of Extinguisher(s) that can be started through the UI.
	ListExtinguisherSpecs(ctx context.Context, in *ListExtinguisherSpecsRequest, opts ...grpc.CallOption) (FssUI_ListExtinguisherSpecsClient, error)
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error)
}

type fssUIClient struct {
	cc grpc.ClientConnInterface
}

func NewFssUIClient(cc grpc.ClientConnInterface) FssUIClient {
	return &fssUIClient{cc}
}

func (c *fssUIClient) ListExtinguisherSpecs(ctx context.Context, in *ListExtinguisherSpecsRequest, opts ...grpc.CallOption) (FssUI_ListExtinguisherSpecsClient, error) {
	stream, err := c.cc.NewStream(ctx, &FssUI_ServiceDesc.Streams[0], "/v1.FssUI/ListExtinguisherSpecs", opts...)
	if err != nil {
		return nil, err
	}
	x := &fssUIListExtinguisherSpecsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FssUI_ListExtinguisherSpecsClient interface {
	Recv() (*ListExtinguisherSpecsResponse, error)
	grpc.ClientStream
}

type fssUIListExtinguisherSpecsClient struct {
	grpc.ClientStream
}

func (x *fssUIListExtinguisherSpecsClient) Recv() (*ListExtinguisherSpecsResponse, error) {
	m := new(ListExtinguisherSpecsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fssUIClient) IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error) {
	out := new(IsReadOnlyResponse)
	err := c.cc.Invoke(ctx, "/v1.FssUI/IsReadOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FssUIServer is the server API for FssUI service.
// All implementations must embed UnimplementedFssUIServer
// for forward compatibility
type FssUIServer interface {
	// ListExtinguisherSpecs returns a list of Extinguisher(s) that can be started through the UI.
	ListExtinguisherSpecs(*ListExtinguisherSpecsRequest, FssUI_ListExtinguisherSpecsServer) error
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error)
	mustEmbedUnimplementedFssUIServer()
}

// UnimplementedFssUIServer must be embedded to have forward compatible implementations.
type UnimplementedFssUIServer struct {
}

func (UnimplementedFssUIServer) ListExtinguisherSpecs(*ListExtinguisherSpecsRequest, FssUI_ListExtinguisherSpecsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListExtinguisherSpecs not implemented")
}
func (UnimplementedFssUIServer) IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReadOnly not implemented")
}
func (UnimplementedFssUIServer) mustEmbedUnimplementedFssUIServer() {}

// UnsafeFssUIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FssUIServer will
// result in compilation errors.
type UnsafeFssUIServer interface {
	mustEmbedUnimplementedFssUIServer()
}

func RegisterFssUIServer(s grpc.ServiceRegistrar, srv FssUIServer) {
	s.RegisterService(&FssUI_ServiceDesc, srv)
}

func _FssUI_ListExtinguisherSpecs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListExtinguisherSpecsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FssUIServer).ListExtinguisherSpecs(m, &fssUIListExtinguisherSpecsServer{stream})
}

type FssUI_ListExtinguisherSpecsServer interface {
	Send(*ListExtinguisherSpecsResponse) error
	grpc.ServerStream
}

type fssUIListExtinguisherSpecsServer struct {
	grpc.ServerStream
}

func (x *fssUIListExtinguisherSpecsServer) Send(m *ListExtinguisherSpecsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FssUI_IsReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReadOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FssUIServer).IsReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FssUI/IsReadOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FssUIServer).IsReadOnly(ctx, req.(*IsReadOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FssUI_ServiceDesc is the grpc.ServiceDesc for FssUI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FssUI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.FssUI",
	HandlerType: (*FssUIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsReadOnly",
			Handler:    _FssUI_IsReadOnly_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListExtinguisherSpecs",
			Handler:       _FssUI_ListExtinguisherSpecs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fss-ui.proto",
}
